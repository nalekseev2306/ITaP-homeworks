#include <iostream>

using namespace std;

int main() {

int i1, i2, i3, i4, x2, x3, x4, x5; // переменные используются для каждого задания

// ЗАДАНИЕ № 1
cout << "Enter power: ";
cin >> i1;
cout << "Answer #1: " << (11 & 5) << endl;
/* 00000010 - это 2 в двоичной с.с. Применив побитовый сдвиг влево один раз,
мы получаем 00000100, что эквивалентно 4 в десятично с.с.
Применяя эту операцию, заметим, что каждый раз число увеличивается вдвое.*/

// ЗАДАНИЕ № 2
cout << "Enter i: ";
cin >> i2;
cout << "Enter number: ";
cin >> x2;
cout << "Answer #2: " << ((1 << i2) | x2) << endl;
/* Нумерация битов начинаетсяс нуля, пусть i = 3 и x = 20,
тогда из числа 00010100 мы должны получить 00011100, для этого проведем
операцию дизъюнкции: 00010100 | 00001000 = 00011100. */ 

// ЗАДАНИЕ № 3
cout << "Enter i: ";
cin >> i3;
cout << "Enter number: ";
cin >> x3;
cout << "Answer #3: " << (~(1 << i3) & x3) << endl;
/* Нумерация битов начинается с нуля, пусть i = 3 и x = 15, тогда
из числа 00001111 мы должны получить 00000111, для этого проведем
следующие операции(инверсия, конъюнкция): 00001111 & (~(00001000)) = 00001111 & 11110111 = 00000111. */ 

// ЗАДАНИЕ № 4
cout << "Enter i: ";
cin >> i4;
cout << "Enter number: ";
cin >> x4;
cout << "Answer #4: ";
(x4 & (1 << i4))? cout << (~(1 << i4) & x4) << endl: cout << ((1 << i4) | x4) << endl;
/* Пример: i = 2, тогда 00001111 -> 00001011 или i = 6, тогда 00001111 -> 01001111.
Если i-тый бит совпадает с i-том битом исходного числа, т.е равен 1, тогда меняем на 0 следующими операциями:
00001111 & (~(00000100)) = 00001111 & 11111011 = 00001011. Если биты не совпадают, т.е i-тый бит числа = 0,
тогда меняем на 1 следующей операцией: 00001111 | 01000000 = 01001111. */ 

// ЗАДАНИЕ № 5
cout << "Enter number: ";
cin >> x5;
cout << "Answer #5: ";
(x5 & 1)? cout << "Odd" << endl: cout << "Even" << endl;
/* Мы проверяем нулевой бит числа x, который отвечает за добавление 1
в десятичной с.с, если он равен 1, то число нечётное, иначе равен 0 - чётное. 
Пример: 00001110 & 00000001 = чётное, т.к 0 & 1 = 0 */ 

system("pause");
return 0;

}